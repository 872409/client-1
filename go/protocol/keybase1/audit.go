// Auto-generated by avdl-compiler v1.3.29 (https://github.com/keybase/node-avdl-compiler)
//   Input file: avdl/keybase1/audit.avdl

package keybase1

import (
	"github.com/keybase/go-framed-msgpack-rpc/rpc"
	context "golang.org/x/net/context"
)

type BoxPublicSummary struct {
	Table map[UID]Seqno `codec:"table" json:"table"`
}

func (o BoxPublicSummary) DeepCopy() BoxPublicSummary {
	return BoxPublicSummary{
		Table: (func(x map[UID]Seqno) map[UID]Seqno {
			if x == nil {
				return nil
			}
			ret := make(map[UID]Seqno, len(x))
			for k, v := range x {
				kCopy := k.DeepCopy()
				vCopy := v.DeepCopy()
				ret[kCopy] = vCopy
			}
			return ret
		})(o.Table),
	}
}

type BoxAuditAttempt struct {
	Ctime           UnixTime              `codec:"ctime" json:"ctime"`
	Error           *string               `codec:"error,omitempty" json:"error,omitempty"`
	Generation      *PerTeamKeyGeneration `codec:"generation,omitempty" json:"generation,omitempty"`
	ExpectedSummary *BoxPublicSummary     `codec:"expectedSummary,omitempty" json:"expectedSummary,omitempty"`
	ActualSummary   *BoxPublicSummary     `codec:"actualSummary,omitempty" json:"actualSummary,omitempty"`
}

func (o BoxAuditAttempt) DeepCopy() BoxAuditAttempt {
	return BoxAuditAttempt{
		Ctime: o.Ctime.DeepCopy(),
		Error: (func(x *string) *string {
			if x == nil {
				return nil
			}
			tmp := (*x)
			return &tmp
		})(o.Error),
		Generation: (func(x *PerTeamKeyGeneration) *PerTeamKeyGeneration {
			if x == nil {
				return nil
			}
			tmp := (*x).DeepCopy()
			return &tmp
		})(o.Generation),
		ExpectedSummary: (func(x *BoxPublicSummary) *BoxPublicSummary {
			if x == nil {
				return nil
			}
			tmp := (*x).DeepCopy()
			return &tmp
		})(o.ExpectedSummary),
		ActualSummary: (func(x *BoxPublicSummary) *BoxPublicSummary {
			if x == nil {
				return nil
			}
			tmp := (*x).DeepCopy()
			return &tmp
		})(o.ActualSummary),
	}
}

type AttemptBoxAuditArg struct {
	SessionID         int    `codec:"sessionID" json:"sessionID"`
	TeamID            TeamID `codec:"teamID" json:"teamID"`
	RotateBeforeAudit bool   `codec:"rotateBeforeAudit" json:"rotateBeforeAudit"`
}

type AuditInterface interface {
	AttemptBoxAudit(context.Context, AttemptBoxAuditArg) (BoxAuditAttempt, error)
}

func AuditProtocol(i AuditInterface) rpc.Protocol {
	return rpc.Protocol{
		Name: "keybase.1.audit",
		Methods: map[string]rpc.ServeHandlerDescription{
			"attemptBoxAudit": {
				MakeArg: func() interface{} {
					var ret [1]AttemptBoxAuditArg
					return &ret
				},
				Handler: func(ctx context.Context, args interface{}) (ret interface{}, err error) {
					typedArgs, ok := args.(*[1]AttemptBoxAuditArg)
					if !ok {
						err = rpc.NewTypeError((*[1]AttemptBoxAuditArg)(nil), args)
						return
					}
					ret, err = i.AttemptBoxAudit(ctx, typedArgs[0])
					return
				},
			},
		},
	}
}

type AuditClient struct {
	Cli rpc.GenericClient
}

func (c AuditClient) AttemptBoxAudit(ctx context.Context, __arg AttemptBoxAuditArg) (res BoxAuditAttempt, err error) {
	err = c.Cli.Call(ctx, "keybase.1.audit.attemptBoxAudit", []interface{}{__arg}, &res)
	return
}
